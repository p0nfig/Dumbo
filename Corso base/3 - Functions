#def happy_new_year(wishes = True):
    #print("Three...")
    #print("Two...")
    #print("One...")
    #if not wishes:
        #return
    #rint("Happy New Year!")

#happy_new_year()
# If wishes = False, the function will only count down without printing the New Year wish.

#def strange_function(n):
    #if(n % 2 == 0):
        #return True
#print(strange_function(4))

#def strange_list_fun(n):
    #strange_list = []
    
    #for i in range(0, n):
        #strange_list.insert(0, i)
    #return strange_list
#print(strange_list_fun(5))

#def is_year_leap(year):
    #if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        #return True 
    #else:
        #return False  
    
#test_data = [1900, 2000, 2016, 1987] 
#test_results = [False, True, True, False]  

#for i in range(len(test_data)):
    #yr = test_data[i] 
    #print(yr, "->", end="") 
    #result = is_year_leap(yr) 
    #if result == test_results[i]:
        #print("OK") 
    #else: 
        #print("Failed")

#def is_prime(num):
    #if num < 2:
        #return False
    #for j in range(2, int(num**0.5) + 1):
        #if num % j == 0:
            #return False
    #return True

#for i in range(1, 20):
    #if is_prime(i + 1):
        #print(i + 1, end=" ")
#print()

#def liters_100km_to_miles_gallon(liters):
    #return 235.214583 / liters  
#def miles_gallon_to_liters_100km(miles): 
    #return 235.214583 / miles  

#def f_print():
    #print("ciao")  # mostra "ciao"
    # valore di ritorno implicito: None
#def f_return():
    #return "ciao"  # non stampa, restituisce la stringa

#val = f_return()   # val == "ciao"
#print(val)         # ora viene mostrato

#def my_function():
    #global var
    #var = 2
    #print("Do I know that variable?", var)
# With global, modifies the global variable (outside of function)
#var = 1
#my_function()
#print(var)


# rebinding the parameter (does NOT affect caller)
#def rebind(lst):
    #lst = [0, 0, 0] # this makes the local name 'lst' point to a new list
#a = [1, 2, 3]
#print(rebind(a))
#print(a)  # still [1, 2, 3]; CAMBIAREBBE SE RETURN

# mutating the object (affects caller)
#def mutate(lst):
    #lst.append(4) # modifies the same list object
#b = [1, 2, 3]
#mutate(b)
#print(b)  # [1, 2, 3, 4]

#def bmi(weight, height):
    #if height < 1.0 or height > 2.5 or \
    #weight < 20 or weight > 200:
        #return None
    #return weight / height ** 2
#print(bmi(352.5, 1.65))

#def is_a_triangle(a, b, c):
    #return a + b > c and b + c > a and c + a > b
#print(is_a_triangle(1, 1, 1))
#print(is_a_triangle(1, 1, 3))

#def is_a_triangle(a, b, c):
    #return a + b > c and b + c > a and c + a > b
#def heron(a, b, c):
    #p = (a + b + c) / 2
    #return (p * (p - a) * (p - b) * (p - c)) ** 0.5
#def area_of_triangle(a, b, c):
    #if not is_a_triangle(a, b, c):
        #return None
    #return heron(a, b, c)
#print(area_of_triangle(1., 1., 2. ** .5))

#def fib(n):
    #if n < 1:
        #return None
    #if n < 3:
        #return 1
    #return fib(n - 1) + fib(n - 2)

#def factorial_function(n):
    #if n < 0:
        #return None
    #if n < 2:
        #return 1
    #return n * factorial_function(n - 1)
#print(factorial_function(5))

